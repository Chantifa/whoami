#!groovy

pipeline {
   agent any
   parameters {
        string(name: 'email', description: 'E-Mail address for result')
    }
   stages {
      stage("Build") {

         steps {
            sh "npm ci"
                sh "cd client"
                sh "npm ci"
         }
         post {
            always {
               junit "build/test-results/test/*.xml"
            }
            success {
               notify("Successful", params.email)
            }
            failure {
               notify("Failure", params.email)
            }
         }
      }

      node {
        stage('SCM') {
          checkout scm
        }
        stage('SonarQube Analysis') {
          def scannerHome = tool 'SonarScanner';
          withSonarQubeEnv() {
            sh "whoami/bin/sonar-scanner"
          }
        }
      }

      stage("Quality Gate") {
         options {
            timeout(time: 5, unit: 'MINUTES')
            retry(2)
         }
         steps {
            script  {
               sleep(10)
               def qg = waitForQualityGate()
               if (qg.status != 'OK') {
                  error "Pipeline aborted due to quality gate failure: ${qg.status}"
               }
            }
         }
      }
                            
        stage("Test") {
            sh "cd client"
            sh "npm test"
        }
}


def notify(result, email) {
   emailext (
      subject: "Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
      body: "Result: ${result}",
      recipientProviders: [[$class: 'DevelopersRecipientProvider']],
      to: email
   )
}
